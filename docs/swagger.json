{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Foodies app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of foodies app\n"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "Recipes",
      "description": "Operations about recipes."
    },
    {
      "name": "Users",
      "description": "User registration, login, and profile operations."
    },
    {
      "name": "Areas",
      "description": "Operations about areas."
    },
    {
      "name": "Categories",
      "description": "Operations about categories."
    },
    {
      "name": "Ingredients",
      "description": "Operations about ingredients."
    },
    {
      "name": "Testimonials",
      "description": "Operations about testimonials."
    }
  ],
  "paths": {
    "/api/recipes": {
      "get": {
        "tags": ["Recipes"],
        "summary": "Search recipes",
        "operationId": "searchRecipes",
        "description": "Search recipes with pagination, category, ingredient, area.",
        "parameters": [
          { "in": "query", "name": "category", "schema": { "type": "string" } },
          { "in": "query", "name": "ingredient", "schema": { "type": "string" } },
          { "in": "query", "name": "area", "schema": { "type": "string" } },
          { "in": "query", "name": "page", "schema": { "type": "integer" }, "example": 1 },
          { "in": "query", "name": "limit", "schema": { "type": "integer" }, "example": 10 }
        ],
        "responses": {
          "200": {
            "description": "List of recipes",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Recipe" } }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Recipes"],
        "summary": "Create recipe",
        "operationId": "createRecipe",
        "description": "Create a new recipe.",
        "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Recipe" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recipe created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Recipe" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/api/recipes/popular": {
      "get": {
        "tags": ["Recipes"],
        "summary": "Get popular recipes",
        "operationId": "getPopularRecipes",
        "description": "Get recipes sorted by number of favorites.",
        "parameters": [
          { "in": "query", "name": "page", "schema": { "type": "integer" }, "example": 1 },
          { "in": "query", "name": "limit", "schema": { "type": "integer" }, "example": 10 }
        ],
        "responses": {
          "200": {
            "description": "Popular recipes",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Recipe" } }
              }
            }
          }
        }
      }
    },
    "/api/recipes/{id}": {
      "get": {
        "tags": ["Recipes"],
        "summary": "Get recipe by id",
        "operationId": "getRecipeById",
        "description": "Get recipe details by id.",
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Recipe details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Recipe" }
              }
            }
          },
          "404": { "description": "Recipe not found" }
        }
      },
      "delete": {
        "tags": ["Recipes"],
        "summary": "Delete recipe",
        "operationId": "deleteRecipe",
        "description": "Delete a recipe by id (owner only).",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "204": { "description": "Recipe deleted" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Recipe not found" }
        }
      }
    },
    "/api/recipes/own": {
      "get": {
        "tags": ["Recipes"],
        "summary": "Get own recipes",
        "operationId": "getOwnRecipes",
        "description": "Get recipes created by the current user.",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          { "in": "query", "name": "page", "schema": { "type": "integer" }, "example": 1 },
          { "in": "query", "name": "limit", "schema": { "type": "integer" }, "example": 10 }
        ],
        "responses": {
          "200": {
            "description": "List of own recipes",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Recipe" } }
              }
            }
          },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/api/recipes/{id}/favorite": {
      "post": {
        "tags": ["Recipes"],
        "summary": "Add recipe to favorites",
        "operationId": "addFavorite",
        "description": "Add a recipe to user's favorites.",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Recipe added to favorites" },
          "404": { "description": "Recipe not found" },
          "401": { "$ref": "#/components/responses/401" }
        }
      },
      "delete": {
        "tags": ["Recipes"],
        "summary": "Remove recipe from favorites",
        "operationId": "removeFavorite",
        "description": "Remove a recipe from user's favorites.",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Recipe removed from favorites" },
          "404": { "description": "Recipe not found" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/api/recipes/favorites": {
      "get": {
        "tags": ["Recipes"],
        "summary": "Get favorite recipes",
        "operationId": "getFavoriteRecipes",
        "description": "Get all recipes favorited by the current user.",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          { "in": "query", "name": "page", "schema": { "type": "integer" }, "example": 1 },
          { "in": "query", "name": "limit", "schema": { "type": "integer" }, "example": 10 }
        ],
        "responses": {
          "200": {
            "description": "List of favorite recipes",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Recipe" } }
              }
            }
          },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/api/users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "Register user",
        "operationId": "registerUser",
        "description": "Register a new user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": { "description": "Validation error" }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "Login user and get JWT token.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "example": "user@example.com" },
                  "password": { "type": "string", "example": "password123" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": { "type": "string", "example": "jwt-token" },
                    "user": { "$ref": "#/components/schemas/User" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logout current user.",
        "security": [ { "bearerAuth": [] } ],
        "responses": {
          "204": { "description": "User logged out" },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/api/users/me": {
      "get": {
        "tags": ["Users"],
        "summary": "Get current user",
        "operationId": "getCurrentUser",
        "description": "Get current logged-in user info.",
        "security": [ { "bearerAuth": [] } ],
        "responses": {
          "200": {
            "description": "Current user info",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/401" }
        }
      }
    },
    "/api/areas": {
      "get": {
        "tags": [
          "Areas"
        ],
        "summary": "Get all areas",
        "operationId": "getAreas",
        "description": "Get a list of all areas.",
        "responses": {
          "200": {
            "description": "List of areas",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Area"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "operationId": "getCategories",
        "description": "Get a list of all categories.",
        "responses": {
          "200": {
            "description": "List of categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/ingredients": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Get all ingredients",
        "operationId": "getIngredients",
        "description": "Get a list of all ingredients.",
        "responses": {
          "200": {
            "description": "List of ingredients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ingredient"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/testimonials": {
      "get": {
        "tags": [
          "Testimonials"
        ],
        "summary": "Get all testimonials",
        "operationId": "getTestimonials",
        "description": "Get a list of all testimonials.",
        "responses": {
          "200": {
            "description": "List of testimonials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Testimonial"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "Recipe": {
        "type": "object",
        "required": ["id", "title", "description", "ingredients", "instructions", "authorId"],
        "properties": {
          "id": { "type": "string", "example": "123" },
          "title": { "type": "string", "example": "Chicken Soup" },
          "description": { "type": "string", "example": "A tasty chicken soup recipe." },
          "ingredients": { "type": "array", "items": { "type": "string" }, "example": ["chicken", "water", "salt"] },
          "instructions": { "type": "string", "example": "Boil chicken, add salt, simmer." },
          "authorId": { "type": "string", "example": "user123" },
          "favoritesCount": { "type": "integer", "example": 10 }
        }
      },
      "User": {
        "type": "object",
        "required": ["id", "email", "name"],
        "properties": {
          "id": { "type": "string", "example": "user123" },
          "email": { "type": "string", "example": "user@example.com" },
          "name": { "type": "string", "example": "John Doe" },
          "avatarURL": { "type": "string", "example": "https://example.com/avatar.jpg" }
        }
      },
      "Area": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "area123"
          },
          "name": {
            "type": "string",
            "example": "Europe"
          }
        }
      },
      "Category": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "cat123"
          },
          "name": {
            "type": "string",
            "example": "Dessert"
          }
        }
      },
      "Ingredient": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "ing123"
          },
          "name": {
            "type": "string",
            "example": "Sugar"
          }
        }
      },
      "Testimonial": {
        "type": "object",
        "required": [
          "id",
          "author",
          "text"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "test123"
          },
          "author": {
            "type": "string",
            "example": "Jane Doe"
          },
          "text": {
            "type": "string",
            "example": "Great recipes!"
          }
        }
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}